function PERSOffset() {
	var Case, N, P = image_index, Mirror = 1;
	ST = true
	LT = 1
	if(Spin == 1) StateUpdate(1)
	if(Spin == -1)StateUpdate(-1)

	N = image_index

	if(sprite_index == P_X and !OSpin)exit

	if(sprite_index < P_Q)
	{
	    //Offset table for Y,R,N,N2,J and L Pentominoes
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 -1,+0 +1,+0 -1,-1 +0,+3 -1,+3"
	    //1>>0
	    PERS[1] = "+0,+0 +1,+0 -1,+0 +1,+1 +0,-3 +1,-3"
	    //1>>2
	    PERS[2] = "+0,+0 +1,+0 -1,+0 +1,+2 +0,-2 +1,-2"
	    //2>>1
	    PERS[3] = "+0,+0 -1,+0 +1,+0 -1,-2 +0,+2 -1,+2"
	    //2>>3
	    PERS[4] = "+0,+0 +1,+0 -1,+0 +1,-2 +0,+2 +1,+2"
	    //3>>2
	    PERS[5] = "+0,+0 -1,+0 +1,+0 -1,+2 +0,-2 -1,-2"
	    //3>>0
	    PERS[6] = "+0,+0 -1,+0 +1,+0 -1,+1 +0,-3 -1,-3"
	    //0>>3
	    PERS[7] = "+0,+0 +1,+0 -1,+0 +1,-1 +0,+3 +1,+3"
	}
	else if(sprite_index == P_P or sprite_index == P_Q)
	{
	    //Offset table P and Q Pentominoes
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 +1,+0 +0,-1 -1,-2 +0,+2 +1,+2"
	    //1>>0
	    PERS[1] = "+0,+0 -1,+0 +0,+1 +1,+2 +0,-2 -1,-2"
	    //1>>2
	    PERS[2] = "+0,+0 +1,+0 +0,+1 +1,+2 +0,-1 +1,-1"
	    //2>>1
	    PERS[3] = "+0,+0 -1,+0 +0,-1 -1,-2 +0,+1 -1,+1"
	    //2>>3
	    PERS[4] = "+0,+0 -1,+0 +0,-1 +1,-1 +0,+3 -1,+3"
	    //3>>2
	    PERS[5] = "+0,+0 +1,+0 +0,+1 -1,+1 +0,-3 +1,-3"
	    //3>>0
	    PERS[6] = "+0,+0 -1,+0 +0,+1 -2,+1 +0,-3 -1,-3"
	    //0>>3
	    PERS[7] = "+0,+0 +1,+0 +0,-1 +2,-1 +0,+3 +1,+3"
	}
	else if(sprite_index == P_I)
	{
	    //Offset table for I Pentomino
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 +2,+0 -2,+0 -2,+2 +0,-1 +2,-2"
	    //1>>0
	    PERS[1] = "+0,+0 -2,+0 +2,+0 -2,+2 +0,+1 +2,-2"
	    //1>>0
	    PERS[2] = "+0,+0 +2,+0 -2,+0 +2,+2 +0,+1 -2,-2"
	    //0>>1
	    PERS[3] = "+0,+0 -2,+0 +2,+0 +2,+2 +0,-1 -2,-2"
	    //0>>1
	    PERS[4] = "+0,+0 +2,+0 -2,+0 -2,+2 +0,-1 +2,-2"
	    //1>>0
	    PERS[5] = "+0,+0 -2,+0 +2,+0 -2,+2 +0,+1 +2,-2"
	    //1>>0
	    PERS[6] = "+0,+0 +2,+0 -2,+0 +2,+2 +0,+1 -2,-2"
	    //0>>1
	    PERS[7] = "+0,+0 -2,+0 +2,+0 +2,+2 +0,-1 -2,-2"
	}
	else if(sprite_index == P_W)
	{
	    //Offset table for W Pentomino
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 -1,+0 +1,-1 +1,+1 +0,+3 +1,+3"
	    //1>>0
	    PERS[1] = "+0,+0 +1,+0 -1,+1 -1,-1 +0,-3 -1,-3"
	    //1>>2
	    PERS[2] = "+0,+0 +1,+0 +1,+1 +1,-1 +0,+2 +0,-2"
	    //2>>1
	    PERS[3] = "+0,+0 -1,+0 -1,+1 -1,-1 +0,+2 +0,-2"
	    //2>>3
	    PERS[4] = "+0,+0 -1,+0 +1,+1 +1,-1 +0,-3 -1,-3"
	    //3>>2
	    PERS[5] = "+0,+0 +1,+0 -1,-1 -1,+1 +0,+3 +1,+3"
	    //3>>0
	    PERS[6] = "+0,+0 -1,+0 -1,+1 -1,-1 +0,+3 +0,-3"
	    //0>>3
	    PERS[7] = "+0,+0 +1,+0 +1,+1 +1,-1 +0,+3 +0,-3"
	}
	else if(sprite_index > P_I and sprite_index < P_S)
	{
	    //Offset table for T, F, 7 and W Pentominoes
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 -1,+0 +0,+1 -1,+1 +1,+3 +0,+3"
	    //1>>0
	    PERS[1] = "+0,+0 +1,+0 +0,-1 +1,-1 -1,-3 +0,-3"
	    //1>>2
	    PERS[2] = "+0,+0 -1,+0 -1,-1 +1,-1 +0,+1 +0,+2"
	    //2>>1
	    PERS[3] = "+0,+0 +1,+0 +1,+1 -1,+1 +0,-1 +0,-2"
	    //2>>3
	    PERS[4] = "+0,+0 -1,+0 -1,+1 +1,+1 +0,-1 +0,-2"
	    //3>>2
	    PERS[5] = "+0,+0 +1,+0 +1,-1 -1,-1 +0,+1 +0,+2"
	    //3>>0
	    PERS[6] = "+0,+0 -1,+0 +0,-1 -1,-1 +1,-3 +0,-3"
	    //0>>3
	    PERS[7] = "+0,+0 +1,+0 +0,+1 +1,+1 -1,+3 +0,+3"
	}
	else if(sprite_index == P_Z or sprite_index == P_S)
	{
	    //Offset table for Z and S Pentominoes
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 +1,+1 +2,+0 -2,+0 +3,+0 +2,-1"
	    //1>>0
	    PERS[1] = "+0,+0 -1,-1 -2,+0 +2,+0 -3,+0 -2,+1"
	    //1>>0
	    PERS[2] = "+0,+0 +1,+1 +0,+2 +0,-1 +0,-3 +1,+2"
	    //0>>1
	    PERS[3] = "+0,+0 -1,-1 +0,-2 +0,-1 +0,+3 -1,-2"
	    //0>>1
	    PERS[4] = "+0,+0 +1,+1 +2,+0 -2,+0 +3,+0 +2,-1"
	    //1>>0
	    PERS[5] = "+0,+0 -1,-1 -2,+0 +2,+0 -3,+0 -2,+1"
	    //1>>0
	    PERS[6] = "+0,+0 +1,+1 +0,+2 +0,-1 +0,-3 +1,+2"
	    //0>>1
	    PERS[7] = "+0,+0 -1,-1 +0,-2 +0,-1 +0,+3 -1,-2"
	}
	else if(sprite_index == P_U)
	{
	    //Offset table for U Pentomino
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 +0,+1 -1,+0 -1,-1 +0,+2 -1,+2"
	    //1>>0
	    PERS[1] = "+0,+0 +0,-1 +1,+0 +1,+1 +0,-2 +1,-2"
	    //1>>2
	    PERS[2] = "+0,+0 -1,+0 +1,+0 +1,+1 +0,-2 +1,-2"
	    //2>>1
	    PERS[3] = "+0,+0 +1,+0 -1,+0 -1,-1 +0,+2 -1,+2"
	    //2>>3
	    PERS[4] = "+0,+0 +1,+1 +1,+0 +1,-1 +0,+2 +1,+2"
	    //3>>2
	    PERS[5] = "+0,+0 -1,-1 -1,+0 -1,+1 +0,-2 -1,-2"
	    //3>>0
	    PERS[6] = "+0,+0 +0,-1 -1,+0 -1,+1 +0,-2 -1,-2"
	    //0>>3
	    PERS[7] = "+0,+0 +0,+1 +1,+0 +1,-1 +0,+2 +1,+2"
	}
	else if(sprite_index == P_X)
	{
	    //Special offset table for X Pentomino
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+1,+0 +1,+1 +1,-1 +2,+0 +0,+0 +0,+0"
	    //1>>0
	    PERS[1] = "-1,+0 -1,-1 -1,+1 -2,+0 +0,+0 +0,+0"
	    //1>>2
	    PERS[2] = "+0,+1 +1,+1 -1,+1 +0,+2 +0,+0 +0,+0"
	    //2>>1
	    PERS[3] = "+0,-1 -1,-1 +1,-1 +0,-2 +0,+0 +0,+0"
	    //2>>3
	    PERS[4] = "-1,+0 -1,+1 -1,-1 -2,+0 +0,+0 +0,+0"
	    //3>>2
	    PERS[5] = "+1,+0 +1,-1 +1,+1 +2,+0 +0,+0 +0,+0"
	    //3>>0
	    PERS[6] = "+0,-1 +1,-1 -1,-1 +0,-2 +0,+0 +0,+0"
	    //0>>3
	    PERS[7] = "+0,+1 -1,+1 +1,+1 +0,+2 +0,+0 +0,+0"
	}
	else if(sprite_index == P_V)
	{
	    //Offset table for V Pentomino
	            //  1     2     3     4     5     6
	    //0>>1
	    PERS[0] = "+0,+0 -2,+0 +2,+0 +0,-1 +0,+2 +3,+0"
	    //1>>0
	    PERS[1] = "+0,+0 +2,+0 -2,+0 +0,+1 +0,-2 -3,+0"
	    //1>>2
	    PERS[2] = "+0,+0 +0,-2 +0,+2 +1,+0 -2,+0 +0,+3"
	    //2>>1
	    PERS[3] = "+0,+0 +0,+2 +0,-2 -1,+0 +2,+0 +1,-3"
	    //2>>3
	    PERS[4] = "+0,+0 -2,+0 +2,+0 +0,+1 +0,-2 -3,+0"
	    //3>>2
	    PERS[5] = "+0,+0 +2,+0 -2,+0 +0,-1 +0,+2 +3,+0"
	    //3>>0
	    PERS[6] = "+0,+0 +0,+2 +0,-2 -1,+0 +2,+0 +0,-3"
	    //0>>3
	    PERS[7] = "+0,+0 +0,+2 +0,-2 +1,+0 -2,+0 +0,+3"
	}

	if(sprite_index == P_S or sprite_index == P_Q)
	{
	    Mirror = -1
    
	    if(Spin == 1) StateUpdate(-2);
	    if(Spin == -1)StateUpdate(2);
    
	    N = image_index
	}

	if     (P == 0 and N == 1) Case = 0
	else if(P == 1 and N == 0) Case = 1
	else if(P == 1 and N == 2) Case = 2
	else if(P == 2 and N == 1) Case = 3
	else if(P == 2 and N == 3) Case = 4
	else if(P == 3 and N == 2) Case = 5
	else if(P == 3 and N == 0) Case = 6
	else if(P == 0 and N == 3) Case = 7

	var i, XO, YO;

	for(i = 0; i < 6; i++)
	{
	    XO = real(string_char_at(PERS[Case], 1 + 6*i) + string_char_at(PERS[Case], 2 + 6*i)) * 64 * Mirror
	    YO = real(string_char_at(PERS[Case], 4 + 6*i) + string_char_at(PERS[Case], 5 + 6*i)) * 64
    
	    if(place_empty(x + XO, y + YO))
	    {
	        x += XO
	        y += YO
	        LT = i + 1
	        exit
	    }
	}

	if(sprite_index != P_Q and sprite_index != P_S)
	{
	    if(Spin == 1) StateUpdate(-1)
	    if(Spin == -1)StateUpdate(1)
	}
	else
	{
	    if(Spin == 1) StateUpdate(1)
	    if(Spin == -1)StateUpdate(-1)
	}

	ST = false
	exit



}
